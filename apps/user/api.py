import binasciiimport osfrom rest_framework import viewsetsfrom rest_framework.decorators import list_routefrom core.decorator.response import Core_connectorfrom utils.exceptions import PubErrorCustomfrom apps.user.models import Users,Token,Loginfrom apps.user.serializers import UserSerializerclass UserAPIView(viewsets.ViewSet):    @list_route(methods=['POST'])    @Core_connector(transaction=True,serializer_class=UserSerializer,model_class=Users)    def register(self, request,*args,**kwargs):        serializer = kwargs.pop('serializer')        serializer.save()        return None    @list_route(methods=['POST'])    @Core_connector(transaction=True)    def login(self, request, *args, **kwargs):        try:            user = Users.objects.get(loginname=request.data_format.get('loginname'))        except Users.DoesNotExist:            raise PubErrorCustom("登录账户错误！")        if user.passwd != self.request.data_format.get('passwd'):            raise PubErrorCustom("密码错误！")        # if not request.data_format.get('vercode') or not len(request.data_format.get('vercode')):        #     raise PubErrorCustom("请输入谷歌验证码!")        #        # if not check_google_token(user.google_token,request.data_format.get('vercode')):        #     raise PubErrorCustom("谷歌验证码错误!")        if user.status == 1 :            raise PubErrorCustom("登录账户错误！")        elif user.status == 2 :            raise PubErrorCustom("已冻结！")        token = Token.objects.filter(userid=user.userid)        if not token.exists():            token = Token.objects.create(userid=user.userid)        else:            token = token[0]            token.key = binascii.hexlify(os.urandom(80)).decode()            token.save()        Login.objects.create(**{            "userid" : user.userid,            "ip" : request.META.get('HTTP_X_REAL_IP')        })        header = {"authorization": token.key}        return { "header": header,"msg":"登录成功！"}    @list_route(methods=['POST'])    @Core_connector(transaction=True)    def login_admin(self, request, *args, **kwargs):        userlogin=Login()        print(request.data_format)        try:            user = Users.objects.get(loginname=request.data_format.get('loginname'))        except Users.DoesNotExist:            raise PubErrorCustom("登录账户错误！")        if user.passwd != self.request.data_format.get('passwd'):            raise PubErrorCustom("密码错误！")        # if not request.data_format.get('vercode') or not len(request.data_format.get('vercode')):        #     raise PubErrorCustom("请输入谷歌验证码!")        #        # if not check_google_token(user.google_token,request.data_format.get('vercode')):        #     raise PubErrorCustom("谷歌验证码错误!")        if user.status == 1 :            raise PubErrorCustom("登录账户错误！")        elif user.status == 2 :            raise PubErrorCustom("已冻结！")        userlogin.userid=user.userid        userlogin.ip = request.META.get('REMOTE_ADDR')        userlogin.user_agent =request.META.get('HTTP_USER_AGENT')        userlogin.save()        token = Token.objects.filter(userid=user.userid)        if not token.exists():            token = Token.objects.create(userid=user.userid)        else:            token = token[0]            token.key = binascii.hexlify(os.urandom(80)).decode()            token.save()        return { "data": token.key,"msg":"登录成功！"}